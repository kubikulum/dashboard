/**
 * Kubernetes CRD Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { IoK8sApiAutoscalingV1Scale } from '../model/ioK8sApiAutoscalingV1Scale';
import { IoK8sApimachineryPkgApisMetaV1DeleteOptions } from '../model/ioK8sApimachineryPkgApisMetaV1DeleteOptions';
import { IoK8sApimachineryPkgApisMetaV1Status } from '../model/ioK8sApimachineryPkgApisMetaV1Status';
import { IoXK8sClusterV1beta1Cluster } from '../model/ioXK8sClusterV1beta1Cluster';
import { IoXK8sClusterV1beta1ClusterClass } from '../model/ioXK8sClusterV1beta1ClusterClass';
import { IoXK8sClusterV1beta1ClusterClassList } from '../model/ioXK8sClusterV1beta1ClusterClassList';
import { IoXK8sClusterV1beta1ClusterList } from '../model/ioXK8sClusterV1beta1ClusterList';
import { IoXK8sClusterV1beta1Machine } from '../model/ioXK8sClusterV1beta1Machine';
import { IoXK8sClusterV1beta1MachineDeployment } from '../model/ioXK8sClusterV1beta1MachineDeployment';
import { IoXK8sClusterV1beta1MachineDeploymentList } from '../model/ioXK8sClusterV1beta1MachineDeploymentList';
import { IoXK8sClusterV1beta1MachineDrainRule } from '../model/ioXK8sClusterV1beta1MachineDrainRule';
import { IoXK8sClusterV1beta1MachineDrainRuleList } from '../model/ioXK8sClusterV1beta1MachineDrainRuleList';
import { IoXK8sClusterV1beta1MachineHealthCheck } from '../model/ioXK8sClusterV1beta1MachineHealthCheck';
import { IoXK8sClusterV1beta1MachineHealthCheckList } from '../model/ioXK8sClusterV1beta1MachineHealthCheckList';
import { IoXK8sClusterV1beta1MachineList } from '../model/ioXK8sClusterV1beta1MachineList';
import { IoXK8sClusterV1beta1MachinePool } from '../model/ioXK8sClusterV1beta1MachinePool';
import { IoXK8sClusterV1beta1MachinePoolList } from '../model/ioXK8sClusterV1beta1MachinePoolList';
import { IoXK8sClusterV1beta1MachineSet } from '../model/ioXK8sClusterV1beta1MachineSet';
import { IoXK8sClusterV1beta1MachineSetList } from '../model/ioXK8sClusterV1beta1MachineSetList';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class ClusterXK8sIoV1beta1Service {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * 
     * create a Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1Cluster 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedCluster(namespace: string, ioXK8sClusterV1beta1Cluster: IoXK8sClusterV1beta1Cluster, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public createClusterXK8sIoV1beta1NamespacedCluster(namespace: string, ioXK8sClusterV1beta1Cluster: IoXK8sClusterV1beta1Cluster, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (ioXK8sClusterV1beta1Cluster === null || ioXK8sClusterV1beta1Cluster === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1Cluster was null or undefined when calling createClusterXK8sIoV1beta1NamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters`,
                    ioXK8sClusterV1beta1Cluster,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1ClusterClass 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedClusterClass(namespace: string, ioXK8sClusterV1beta1ClusterClass: IoXK8sClusterV1beta1ClusterClass, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public createClusterXK8sIoV1beta1NamespacedClusterClass(namespace: string, ioXK8sClusterV1beta1ClusterClass: IoXK8sClusterV1beta1ClusterClass, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (ioXK8sClusterV1beta1ClusterClass === null || ioXK8sClusterV1beta1ClusterClass === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1ClusterClass was null or undefined when calling createClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses`,
                    ioXK8sClusterV1beta1ClusterClass,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1Machine 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedMachine(namespace: string, ioXK8sClusterV1beta1Machine: IoXK8sClusterV1beta1Machine, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public createClusterXK8sIoV1beta1NamespacedMachine(namespace: string, ioXK8sClusterV1beta1Machine: IoXK8sClusterV1beta1Machine, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (ioXK8sClusterV1beta1Machine === null || ioXK8sClusterV1beta1Machine === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1Machine was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines`,
                    ioXK8sClusterV1beta1Machine,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineDeployment 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedMachineDeployment(namespace: string, ioXK8sClusterV1beta1MachineDeployment: IoXK8sClusterV1beta1MachineDeployment, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public createClusterXK8sIoV1beta1NamespacedMachineDeployment(namespace: string, ioXK8sClusterV1beta1MachineDeployment: IoXK8sClusterV1beta1MachineDeployment, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (ioXK8sClusterV1beta1MachineDeployment === null || ioXK8sClusterV1beta1MachineDeployment === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineDeployment was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments`,
                    ioXK8sClusterV1beta1MachineDeployment,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineDrainRule 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedMachineDrainRule(namespace: string, ioXK8sClusterV1beta1MachineDrainRule: IoXK8sClusterV1beta1MachineDrainRule, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDrainRule>>;
    public createClusterXK8sIoV1beta1NamespacedMachineDrainRule(namespace: string, ioXK8sClusterV1beta1MachineDrainRule: IoXK8sClusterV1beta1MachineDrainRule, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (ioXK8sClusterV1beta1MachineDrainRule === null || ioXK8sClusterV1beta1MachineDrainRule === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineDrainRule was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1MachineDrainRule>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules`,
                    ioXK8sClusterV1beta1MachineDrainRule,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineHealthCheck 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedMachineHealthCheck(namespace: string, ioXK8sClusterV1beta1MachineHealthCheck: IoXK8sClusterV1beta1MachineHealthCheck, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public createClusterXK8sIoV1beta1NamespacedMachineHealthCheck(namespace: string, ioXK8sClusterV1beta1MachineHealthCheck: IoXK8sClusterV1beta1MachineHealthCheck, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (ioXK8sClusterV1beta1MachineHealthCheck === null || ioXK8sClusterV1beta1MachineHealthCheck === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineHealthCheck was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks`,
                    ioXK8sClusterV1beta1MachineHealthCheck,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachinePool 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedMachinePool(namespace: string, ioXK8sClusterV1beta1MachinePool: IoXK8sClusterV1beta1MachinePool, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public createClusterXK8sIoV1beta1NamespacedMachinePool(namespace: string, ioXK8sClusterV1beta1MachinePool: IoXK8sClusterV1beta1MachinePool, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (ioXK8sClusterV1beta1MachinePool === null || ioXK8sClusterV1beta1MachinePool === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachinePool was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools`,
                    ioXK8sClusterV1beta1MachinePool,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * create a MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineSet 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createClusterXK8sIoV1beta1NamespacedMachineSet(namespace: string, ioXK8sClusterV1beta1MachineSet: IoXK8sClusterV1beta1MachineSet, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public createClusterXK8sIoV1beta1NamespacedMachineSet(namespace: string, ioXK8sClusterV1beta1MachineSet: IoXK8sClusterV1beta1MachineSet, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (ioXK8sClusterV1beta1MachineSet === null || ioXK8sClusterV1beta1MachineSet === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineSet was null or undefined when calling createClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets`,
                    ioXK8sClusterV1beta1MachineSet,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedCluster(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedCluster(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedClusterClass(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedClusterClass(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachine(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachine(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineDeployment(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineDeployment(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineDrainRule(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineDrainRule(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineHealthCheck(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineHealthCheck(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachinePool(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachinePool(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete collection of MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineSet(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1CollectionNamespacedMachineSet(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1CollectionNamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a MachineDrainRule
     * @param name name of the MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * delete a MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param gracePeriodSeconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
     * @param orphanDependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object\&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
     * @param propagationPolicy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: \&#39;Orphan\&#39; - orphan the dependents; \&#39;Background\&#39; - allow the garbage collector to delete the dependents in the background; \&#39;Foreground\&#39; - a cascading policy that deletes all dependents in the foreground.
     * @param ioK8sApimachineryPkgApisMetaV1DeleteOptions 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<AxiosResponse<IoK8sApimachineryPkgApisMetaV1Status>>;
    public deleteClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, pretty?: string, dryRun?: string, gracePeriodSeconds?: number, orphanDependents?: boolean, propagationPolicy?: string, ioK8sApimachineryPkgApisMetaV1DeleteOptions?: IoK8sApimachineryPkgApisMetaV1DeleteOptions, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling deleteClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (gracePeriodSeconds !== undefined && gracePeriodSeconds !== null) {
            queryParameters.append('gracePeriodSeconds', <any>gracePeriodSeconds);
        }
        if (orphanDependents !== undefined && orphanDependents !== null) {
            queryParameters.append('orphanDependents', <any>orphanDependents);
        }
        if (propagationPolicy !== undefined && propagationPolicy !== null) {
            queryParameters.append('propagationPolicy', <any>propagationPolicy);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<IoK8sApimachineryPkgApisMetaV1Status>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind ClusterClass
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1ClusterClassForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClassList>>;
    public listClusterXK8sIoV1beta1ClusterClassForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1ClusterClassList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/clusterclasses`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind Cluster
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1ClusterForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterList>>;
    public listClusterXK8sIoV1beta1ClusterForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1ClusterList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/clusters`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineDeployment
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1MachineDeploymentForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeploymentList>>;
    public listClusterXK8sIoV1beta1MachineDeploymentForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDeploymentList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/machinedeployments`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineDrainRule
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1MachineDrainRuleForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDrainRuleList>>;
    public listClusterXK8sIoV1beta1MachineDrainRuleForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDrainRuleList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/machinedrainrules`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind Machine
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1MachineForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineList>>;
    public listClusterXK8sIoV1beta1MachineForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/machines`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineHealthCheck
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1MachineHealthCheckForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheckList>>;
    public listClusterXK8sIoV1beta1MachineHealthCheckForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineHealthCheckList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/machinehealthchecks`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachinePool
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1MachinePoolForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePoolList>>;
    public listClusterXK8sIoV1beta1MachinePoolForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachinePoolList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/machinepools`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineSet
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1MachineSetForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSetList>>;
    public listClusterXK8sIoV1beta1MachineSetForAllNamespaces(allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, pretty?: string, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineSetList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/machinesets`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedCluster(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterList>>;
    public listClusterXK8sIoV1beta1NamespacedCluster(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1ClusterList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedClusterClass(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClassList>>;
    public listClusterXK8sIoV1beta1NamespacedClusterClass(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1ClusterClassList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedMachine(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineList>>;
    public listClusterXK8sIoV1beta1NamespacedMachine(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedMachineDeployment(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeploymentList>>;
    public listClusterXK8sIoV1beta1NamespacedMachineDeployment(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDeploymentList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedMachineDrainRule(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDrainRuleList>>;
    public listClusterXK8sIoV1beta1NamespacedMachineDrainRule(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDrainRuleList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedMachineHealthCheck(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheckList>>;
    public listClusterXK8sIoV1beta1NamespacedMachineHealthCheck(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineHealthCheckList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedMachinePool(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePoolList>>;
    public listClusterXK8sIoV1beta1NamespacedMachinePool(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachinePoolList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * list objects of kind MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param allowWatchBookmarks allowWatchBookmarks requests watch events with type \&quot;BOOKMARK\&quot;. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server\&#39;s discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.
     * @param _continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \&quot;next key\&quot;.  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
     * @param fieldSelector A selector to restrict the list of returned objects by their fields. Defaults to everything.
     * @param labelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
     * @param limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param resourceVersionMatch resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param sendInitialEvents &#x60;sendInitialEvents&#x3D;true&#x60; may be set together with &#x60;watch&#x3D;true&#x60;. In that case, the watch stream will begin with synthetic events to produce the current state of objects in the collection. Once all such events have been sent, a synthetic \&quot;Bookmark\&quot; event  will be sent. The bookmark will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with &#x60;\&quot;k8s.io/initial-events-end\&quot;: \&quot;true\&quot;&#x60; annotation. Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes (subsequent to the RV) to objects watched.  When &#x60;sendInitialEvents&#x60; option is set, we require &#x60;resourceVersionMatch&#x60; option to also be set. The semantic of the watch request is as following: - &#x60;resourceVersionMatch&#x60; &#x3D; NotOlderThan   is interpreted as \&quot;data at least as new as the provided &#x60;resourceVersion&#x60;\&quot;   and the bookmark event is send when the state is synced   to a &#x60;resourceVersion&#x60; at least as fresh as the one provided by the ListOptions.   If &#x60;resourceVersion&#x60; is unset, this is interpreted as \&quot;consistent read\&quot; and the   bookmark event is send when the state is synced at least to the moment   when request started being processed. - &#x60;resourceVersionMatch&#x60; set to any other value or unset   Invalid error is returned.  Defaults to true if &#x60;resourceVersion&#x3D;\&quot;\&quot;&#x60; or &#x60;resourceVersion&#x3D;\&quot;0\&quot;&#x60; (for backward compatibility reasons) and to false otherwise.
     * @param timeoutSeconds Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.
     * @param watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listClusterXK8sIoV1beta1NamespacedMachineSet(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSetList>>;
    public listClusterXK8sIoV1beta1NamespacedMachineSet(namespace: string, pretty?: string, allowWatchBookmarks?: boolean, _continue?: string, fieldSelector?: string, labelSelector?: string, limit?: number, resourceVersion?: string, resourceVersionMatch?: string, sendInitialEvents?: boolean, timeoutSeconds?: number, watch?: boolean, ): Observable<any> {
        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling listClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (allowWatchBookmarks !== undefined && allowWatchBookmarks !== null) {
            queryParameters.append('allowWatchBookmarks', <any>allowWatchBookmarks);
        }
        if (_continue !== undefined && _continue !== null) {
            queryParameters.append('continue', <any>_continue);
        }
        if (fieldSelector !== undefined && fieldSelector !== null) {
            queryParameters.append('fieldSelector', <any>fieldSelector);
        }
        if (labelSelector !== undefined && labelSelector !== null) {
            queryParameters.append('labelSelector', <any>labelSelector);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters.append('limit', <any>limit);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }
        if (resourceVersionMatch !== undefined && resourceVersionMatch !== null) {
            queryParameters.append('resourceVersionMatch', <any>resourceVersionMatch);
        }
        if (sendInitialEvents !== undefined && sendInitialEvents !== null) {
            queryParameters.append('sendInitialEvents', <any>sendInitialEvents);
        }
        if (timeoutSeconds !== undefined && timeoutSeconds !== null) {
            queryParameters.append('timeoutSeconds', <any>timeoutSeconds);
        }
        if (watch !== undefined && watch !== null) {
            queryParameters.append('watch', <any>watch);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineSetList>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public patchClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public patchClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedClusterClassStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public patchClusterXK8sIoV1beta1NamespacedClusterClassStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedClusterStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public patchClusterXK8sIoV1beta1NamespacedClusterStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public patchClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update scale of the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineDeploymentScale(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineDeploymentScale(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}/scale`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified MachineDrainRule
     * @param name name of the MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDrainRule>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineDrainRule>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public patchClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update scale of the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachinePoolScale(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public patchClusterXK8sIoV1beta1NamespacedMachinePoolScale(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}/scale`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachinePoolStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public patchClusterXK8sIoV1beta1NamespacedMachinePoolStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update scale of the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineSetScale(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineSetScale(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}/scale`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineSetStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineSetStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * partially update status of the specified Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param body 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param force Force is going to \&quot;force\&quot; Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchClusterXK8sIoV1beta1NamespacedMachineStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public patchClusterXK8sIoV1beta1NamespacedMachineStatus(name: string, namespace: string, body: object, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, force?: boolean, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling patchClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }
        if (force !== undefined && force !== null) {
            queryParameters.append('force', <any>force);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/apply-patch+yaml',
            'application/json-patch+json',
            'application/merge-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}/status`,
                    body,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public readClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public readClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedClusterClassStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public readClusterXK8sIoV1beta1NamespacedClusterClassStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedClusterStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public readClusterXK8sIoV1beta1NamespacedClusterStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public readClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public readClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read scale of the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineDeploymentScale(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public readClusterXK8sIoV1beta1NamespacedMachineDeploymentScale(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}/scale`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public readClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified MachineDrainRule
     * @param name name of the MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDrainRule>>;
    public readClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineDrainRule>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public readClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public readClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public readClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read scale of the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachinePoolScale(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public readClusterXK8sIoV1beta1NamespacedMachinePoolScale(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}/scale`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachinePoolStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public readClusterXK8sIoV1beta1NamespacedMachinePoolStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public readClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read scale of the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineSetScale(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public readClusterXK8sIoV1beta1NamespacedMachineSetScale(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}/scale`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineSetStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public readClusterXK8sIoV1beta1NamespacedMachineSetStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * read status of the specified Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param resourceVersion resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public readClusterXK8sIoV1beta1NamespacedMachineStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public readClusterXK8sIoV1beta1NamespacedMachineStatus(name: string, namespace: string, pretty?: string, resourceVersion?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling readClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (resourceVersion !== undefined && resourceVersion !== null) {
            queryParameters.append('resourceVersion', <any>resourceVersion);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}/status`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1Cluster 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, ioXK8sClusterV1beta1Cluster: IoXK8sClusterV1beta1Cluster, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public replaceClusterXK8sIoV1beta1NamespacedCluster(name: string, namespace: string, ioXK8sClusterV1beta1Cluster: IoXK8sClusterV1beta1Cluster, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedCluster.');
        }

        if (ioXK8sClusterV1beta1Cluster === null || ioXK8sClusterV1beta1Cluster === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1Cluster was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedCluster.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1Cluster,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1ClusterClass 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, ioXK8sClusterV1beta1ClusterClass: IoXK8sClusterV1beta1ClusterClass, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public replaceClusterXK8sIoV1beta1NamespacedClusterClass(name: string, namespace: string, ioXK8sClusterV1beta1ClusterClass: IoXK8sClusterV1beta1ClusterClass, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        if (ioXK8sClusterV1beta1ClusterClass === null || ioXK8sClusterV1beta1ClusterClass === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1ClusterClass was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterClass.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1ClusterClass,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified ClusterClass
     * @param name name of the ClusterClass
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1ClusterClass 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedClusterClassStatus(name: string, namespace: string, ioXK8sClusterV1beta1ClusterClass: IoXK8sClusterV1beta1ClusterClass, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1ClusterClass>>;
    public replaceClusterXK8sIoV1beta1NamespacedClusterClassStatus(name: string, namespace: string, ioXK8sClusterV1beta1ClusterClass: IoXK8sClusterV1beta1ClusterClass, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        if (ioXK8sClusterV1beta1ClusterClass === null || ioXK8sClusterV1beta1ClusterClass === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1ClusterClass was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterClassStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1ClusterClass>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusterclasses/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1ClusterClass,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified Cluster
     * @param name name of the Cluster
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1Cluster 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedClusterStatus(name: string, namespace: string, ioXK8sClusterV1beta1Cluster: IoXK8sClusterV1beta1Cluster, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Cluster>>;
    public replaceClusterXK8sIoV1beta1NamespacedClusterStatus(name: string, namespace: string, ioXK8sClusterV1beta1Cluster: IoXK8sClusterV1beta1Cluster, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        if (ioXK8sClusterV1beta1Cluster === null || ioXK8sClusterV1beta1Cluster === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1Cluster was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedClusterStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1Cluster>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/clusters/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1Cluster,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1Machine 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, ioXK8sClusterV1beta1Machine: IoXK8sClusterV1beta1Machine, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachine(name: string, namespace: string, ioXK8sClusterV1beta1Machine: IoXK8sClusterV1beta1Machine, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachine.');
        }

        if (ioXK8sClusterV1beta1Machine === null || ioXK8sClusterV1beta1Machine === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1Machine was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachine.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1Machine,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineDeployment 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, ioXK8sClusterV1beta1MachineDeployment: IoXK8sClusterV1beta1MachineDeployment, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineDeployment(name: string, namespace: string, ioXK8sClusterV1beta1MachineDeployment: IoXK8sClusterV1beta1MachineDeployment, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        if (ioXK8sClusterV1beta1MachineDeployment === null || ioXK8sClusterV1beta1MachineDeployment === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineDeployment was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeployment.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1MachineDeployment,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace scale of the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioK8sApiAutoscalingV1Scale 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentScale(name: string, namespace: string, ioK8sApiAutoscalingV1Scale: IoK8sApiAutoscalingV1Scale, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentScale(name: string, namespace: string, ioK8sApiAutoscalingV1Scale: IoK8sApiAutoscalingV1Scale, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        if (ioK8sApiAutoscalingV1Scale === null || ioK8sApiAutoscalingV1Scale === undefined) {
            throw new Error('Required parameter ioK8sApiAutoscalingV1Scale was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}/scale`,
                    ioK8sApiAutoscalingV1Scale,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified MachineDeployment
     * @param name name of the MachineDeployment
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineDeployment 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachineDeployment: IoXK8sClusterV1beta1MachineDeployment, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDeployment>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachineDeployment: IoXK8sClusterV1beta1MachineDeployment, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        if (ioXK8sClusterV1beta1MachineDeployment === null || ioXK8sClusterV1beta1MachineDeployment === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineDeployment was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDeploymentStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineDeployment>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedeployments/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1MachineDeployment,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified MachineDrainRule
     * @param name name of the MachineDrainRule
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineDrainRule 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, ioXK8sClusterV1beta1MachineDrainRule: IoXK8sClusterV1beta1MachineDrainRule, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineDrainRule>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineDrainRule(name: string, namespace: string, ioXK8sClusterV1beta1MachineDrainRule: IoXK8sClusterV1beta1MachineDrainRule, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        if (ioXK8sClusterV1beta1MachineDrainRule === null || ioXK8sClusterV1beta1MachineDrainRule === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineDrainRule was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineDrainRule.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineDrainRule>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinedrainrules/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1MachineDrainRule,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineHealthCheck 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, ioXK8sClusterV1beta1MachineHealthCheck: IoXK8sClusterV1beta1MachineHealthCheck, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheck(name: string, namespace: string, ioXK8sClusterV1beta1MachineHealthCheck: IoXK8sClusterV1beta1MachineHealthCheck, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        if (ioXK8sClusterV1beta1MachineHealthCheck === null || ioXK8sClusterV1beta1MachineHealthCheck === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineHealthCheck was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheck.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1MachineHealthCheck,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified MachineHealthCheck
     * @param name name of the MachineHealthCheck
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineHealthCheck 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachineHealthCheck: IoXK8sClusterV1beta1MachineHealthCheck, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineHealthCheck>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachineHealthCheck: IoXK8sClusterV1beta1MachineHealthCheck, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        if (ioXK8sClusterV1beta1MachineHealthCheck === null || ioXK8sClusterV1beta1MachineHealthCheck === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineHealthCheck was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineHealthCheckStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineHealthCheck>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinehealthchecks/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1MachineHealthCheck,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachinePool 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, ioXK8sClusterV1beta1MachinePool: IoXK8sClusterV1beta1MachinePool, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachinePool(name: string, namespace: string, ioXK8sClusterV1beta1MachinePool: IoXK8sClusterV1beta1MachinePool, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        if (ioXK8sClusterV1beta1MachinePool === null || ioXK8sClusterV1beta1MachinePool === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachinePool was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePool.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1MachinePool,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace scale of the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioK8sApiAutoscalingV1Scale 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachinePoolScale(name: string, namespace: string, ioK8sApiAutoscalingV1Scale: IoK8sApiAutoscalingV1Scale, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachinePoolScale(name: string, namespace: string, ioK8sApiAutoscalingV1Scale: IoK8sApiAutoscalingV1Scale, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        if (ioK8sApiAutoscalingV1Scale === null || ioK8sApiAutoscalingV1Scale === undefined) {
            throw new Error('Required parameter ioK8sApiAutoscalingV1Scale was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePoolScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}/scale`,
                    ioK8sApiAutoscalingV1Scale,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified MachinePool
     * @param name name of the MachinePool
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachinePool 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachinePoolStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachinePool: IoXK8sClusterV1beta1MachinePool, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachinePool>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachinePoolStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachinePool: IoXK8sClusterV1beta1MachinePool, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        if (ioXK8sClusterV1beta1MachinePool === null || ioXK8sClusterV1beta1MachinePool === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachinePool was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachinePoolStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachinePool>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinepools/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1MachinePool,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineSet 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, ioXK8sClusterV1beta1MachineSet: IoXK8sClusterV1beta1MachineSet, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineSet(name: string, namespace: string, ioXK8sClusterV1beta1MachineSet: IoXK8sClusterV1beta1MachineSet, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        if (ioXK8sClusterV1beta1MachineSet === null || ioXK8sClusterV1beta1MachineSet === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineSet was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSet.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}`,
                    ioXK8sClusterV1beta1MachineSet,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace scale of the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioK8sApiAutoscalingV1Scale 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineSetScale(name: string, namespace: string, ioK8sApiAutoscalingV1Scale: IoK8sApiAutoscalingV1Scale, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoK8sApiAutoscalingV1Scale>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineSetScale(name: string, namespace: string, ioK8sApiAutoscalingV1Scale: IoK8sApiAutoscalingV1Scale, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        if (ioK8sApiAutoscalingV1Scale === null || ioK8sApiAutoscalingV1Scale === undefined) {
            throw new Error('Required parameter ioK8sApiAutoscalingV1Scale was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSetScale.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoK8sApiAutoscalingV1Scale>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}/scale`,
                    ioK8sApiAutoscalingV1Scale,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified MachineSet
     * @param name name of the MachineSet
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1MachineSet 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineSetStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachineSet: IoXK8sClusterV1beta1MachineSet, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1MachineSet>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineSetStatus(name: string, namespace: string, ioXK8sClusterV1beta1MachineSet: IoXK8sClusterV1beta1MachineSet, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        if (ioXK8sClusterV1beta1MachineSet === null || ioXK8sClusterV1beta1MachineSet === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1MachineSet was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineSetStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1MachineSet>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machinesets/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1MachineSet,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * replace status of the specified Machine
     * @param name name of the Machine
     * @param namespace object name and auth scope, such as for teams and projects
     * @param ioXK8sClusterV1beta1Machine 
     * @param pretty If \&#39;true\&#39;, then the output is pretty printed. Defaults to \&#39;false\&#39; unless the user-agent indicates a browser or command-line HTTP tool (curl and wget).
     * @param dryRun When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
     * @param fieldManager fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
     * @param fieldValidation fieldValidation instructs the server on how to handle objects in the request (POST/PUT/PATCH) containing unknown or duplicate fields. Valid values are: - Ignore: This will ignore any unknown fields that are silently dropped from the object, and will ignore all but the last duplicate field that the decoder encounters. This is the default behavior prior to v1.23. - Warn: This will send a warning via the standard warning response header for each unknown field that is dropped from the object, and for each duplicate field that is encountered. The request will still succeed if there are no other errors, and will only persist the last of any duplicate fields. This is the default in v1.23+ - Strict: This will fail the request with a BadRequest error if any unknown fields would be dropped from the object, or if any duplicate fields are present. The error returned from the server will contain all unknown and duplicate fields encountered.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceClusterXK8sIoV1beta1NamespacedMachineStatus(name: string, namespace: string, ioXK8sClusterV1beta1Machine: IoXK8sClusterV1beta1Machine, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<AxiosResponse<IoXK8sClusterV1beta1Machine>>;
    public replaceClusterXK8sIoV1beta1NamespacedMachineStatus(name: string, namespace: string, ioXK8sClusterV1beta1Machine: IoXK8sClusterV1beta1Machine, pretty?: string, dryRun?: string, fieldManager?: string, fieldValidation?: string, ): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        if (namespace === null || namespace === undefined) {
            throw new Error('Required parameter namespace was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        if (ioXK8sClusterV1beta1Machine === null || ioXK8sClusterV1beta1Machine === undefined) {
            throw new Error('Required parameter ioXK8sClusterV1beta1Machine was null or undefined when calling replaceClusterXK8sIoV1beta1NamespacedMachineStatus.');
        }

        let queryParameters = new URLSearchParams();
        if (pretty !== undefined && pretty !== null) {
            queryParameters.append('pretty', <any>pretty);
        }
        if (dryRun !== undefined && dryRun !== null) {
            queryParameters.append('dryRun', <any>dryRun);
        }
        if (fieldManager !== undefined && fieldManager !== null) {
            queryParameters.append('fieldManager', <any>fieldManager);
        }
        if (fieldValidation !== undefined && fieldValidation !== null) {
            queryParameters.append('fieldValidation', <any>fieldValidation);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (bearerAuth) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/yaml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<IoXK8sClusterV1beta1Machine>(`${this.basePath}/apis/cluster.x-k8s.io/v1beta1/namespaces/${encodeURIComponent(String(namespace))}/machines/${encodeURIComponent(String(name))}/status`,
                    ioXK8sClusterV1beta1Machine,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
