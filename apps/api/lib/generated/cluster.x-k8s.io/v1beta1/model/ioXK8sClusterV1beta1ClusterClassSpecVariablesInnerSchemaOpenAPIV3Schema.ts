/**
 * Kubernetes CRD Swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { IoXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3SchemaXKubernetesValidationsInner } from './ioXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3SchemaXKubernetesValidationsInner';
import { IoXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3SchemaXMetadata } from './ioXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3SchemaXMetadata';


/**
 * openAPIV3Schema defines the schema of a variable via OpenAPI v3 schema. The schema is a subset of the schema used in Kubernetes CRDs.
 */
export interface IoXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3Schema { 
    /**
     * additionalProperties specifies the schema of values in a map (keys are always strings). NOTE: Can only be set if type is object. NOTE: AdditionalProperties is mutually exclusive with Properties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    additionalProperties?: any | null;
    /**
     * allOf specifies that the variable must validate against all of the subschemas in the array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    allOf?: any | null;
    /**
     * anyOf specifies that the variable must validate against one or more of the subschemas in the array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    anyOf?: any | null;
    /**
     * default is the default value of the variable. NOTE: Can be set for all types.
     */
    'default'?: any | null;
    /**
     * description is a human-readable description of this variable.
     */
    description?: string;
    /**
     * enum is the list of valid values of the variable. NOTE: Can be set for all types.
     */
    'enum'?: Array<any>;
    /**
     * example is an example for this variable.
     */
    example?: any | null;
    /**
     * exclusiveMaximum specifies if the Maximum is exclusive. NOTE: Can only be set if type is integer or number.
     */
    exclusiveMaximum?: boolean;
    /**
     * exclusiveMinimum specifies if the Minimum is exclusive. NOTE: Can only be set if type is integer or number.
     */
    exclusiveMinimum?: boolean;
    /**
     * format is an OpenAPI v3 format string. Unknown formats are ignored. For a list of supported formats please see: (of the k8s.io/apiextensions-apiserver version we\'re currently using) https://github.com/kubernetes/apiextensions-apiserver/blob/master/pkg/apiserver/validation/formats.go NOTE: Can only be set if type is string.
     */
    format?: string;
    /**
     * items specifies fields of an array. NOTE: Can only be set if type is array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    items?: any | null;
    /**
     * maxItems is the max length of an array variable. NOTE: Can only be set if type is array.
     */
    maxItems?: number;
    /**
     * maxLength is the max length of a string variable. NOTE: Can only be set if type is string.
     */
    maxLength?: number;
    /**
     * maxProperties is the maximum amount of entries in a map or properties in an object. NOTE: Can only be set if type is object.
     */
    maxProperties?: number;
    /**
     * maximum is the maximum of an integer or number variable. If ExclusiveMaximum is false, the variable is valid if it is lower than, or equal to, the value of Maximum. If ExclusiveMaximum is true, the variable is valid if it is strictly lower than the value of Maximum. NOTE: Can only be set if type is integer or number.
     */
    maximum?: number;
    /**
     * minItems is the min length of an array variable. NOTE: Can only be set if type is array.
     */
    minItems?: number;
    /**
     * minLength is the min length of a string variable. NOTE: Can only be set if type is string.
     */
    minLength?: number;
    /**
     * minProperties is the minimum amount of entries in a map or properties in an object. NOTE: Can only be set if type is object.
     */
    minProperties?: number;
    /**
     * minimum is the minimum of an integer or number variable. If ExclusiveMinimum is false, the variable is valid if it is greater than, or equal to, the value of Minimum. If ExclusiveMinimum is true, the variable is valid if it is strictly greater than the value of Minimum. NOTE: Can only be set if type is integer or number.
     */
    minimum?: number;
    /**
     * not specifies that the variable must not validate against the subschema. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    not?: any | null;
    /**
     * oneOf specifies that the variable must validate against exactly one of the subschemas in the array. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    oneOf?: any | null;
    /**
     * pattern is the regex which a string variable must match. NOTE: Can only be set if type is string.
     */
    pattern?: string;
    /**
     * properties specifies fields of an object. NOTE: Can only be set if type is object. NOTE: Properties is mutually exclusive with AdditionalProperties. NOTE: This field uses PreserveUnknownFields and Schemaless, because recursive validation is not possible.
     */
    properties?: any | null;
    /**
     * required specifies which fields of an object are required. NOTE: Can only be set if type is object.
     */
    required?: Array<string>;
    /**
     * type is the type of the variable. Valid values are: object, array, string, integer, number or boolean.
     */
    type?: string;
    /**
     * uniqueItems specifies if items in an array must be unique. NOTE: Can only be set if type is array.
     */
    uniqueItems?: boolean;
    /**
     * x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:  1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
     */
    'x-kubernetes-int-or-string'?: boolean;
    /**
     * x-kubernetes-preserve-unknown-fields allows setting fields in a variable object which are not defined in the variable schema. This affects fields recursively, except if nested properties or additionalProperties are specified in the schema.
     */
    'x-kubernetes-preserve-unknown-fields'?: boolean;
    /**
     * x-kubernetes-validations describes a list of validation rules written in the CEL expression language.
     */
    'x-kubernetes-validations'?: Array<IoXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3SchemaXKubernetesValidationsInner>;
    'x-metadata'?: IoXK8sClusterV1beta1ClusterClassSpecVariablesInnerSchemaOpenAPIV3SchemaXMetadata;
}

