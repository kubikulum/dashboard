datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String               @id @default(cuid())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  firstName           String?
  email               String?              @unique
  roles               Json
  organization        String?
  lastName            String?
  ownerOrganizations  Organization[]
  username            String               @unique
  password            String?
  invitations         Invitation[]
  organizationMembers OrganizationMember[]
}

model Organization {
  id                       String               @id @default(cuid())
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  name                     String
  owner                    User?                @relation(fields: [ownerId], references: [id])
  ownerId                  String?
  clusters                 Cluster[]
  gardenerProjectNamespace String?              @unique
  invitations              Invitation[]
  organizationMembers      OrganizationMember[]
}

model Cluster {
  id             String                 @id @default(cuid())
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  clusterType    EnumClusterClusterType
  organization   Organization?          @relation(fields: [organizationId], references: [id])
  organizationId String?
  plan           EnumClusterPlan?
}

model Invitation {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  email               String
  status              EnumInvitationStatus?
  expirationDate      DateTime?
  organization        Organization          @relation(fields: [organizationId], references: [id])
  organizationId      String
  inviter             User                  @relation(fields: [inviterId], references: [id])
  inviterId           String
  code                String                @unique
  role                Json
  organizationMembers OrganizationMember[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  invitation     Invitation?  @relation(fields: [invitationId], references: [id])
  invitationId   String?      @unique
}

enum EnumClusterClusterType {
  kubeflow
  Flytes
}

enum EnumClusterPlan {
  Free
  Reserved_1
}

enum EnumInvitationStatus {
  PENDING
  ACCEPTED
  REVOKED
}
