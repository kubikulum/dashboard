/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  IsEnum,
  IsOptional,
  ValidateNested,
  MaxLength,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumInvitationStatus } from "./EnumInvitationStatus";
import { Organization } from "../../organization/base/Organization";
import { User } from "../../user/base/User";
import { OrganizationMember } from "../../organizationMember/base/OrganizationMember";

@ObjectType()
class Invitation {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  email!: string;

  @ApiProperty({
    required: false,
    enum: EnumInvitationStatus,
  })
  @IsEnum(EnumInvitationStatus)
  @IsOptional()
  @Field(() => EnumInvitationStatus, {
    nullable: true,
  })
  status?: "PENDING" | "ACCEPTED" | "REVOKED" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  expirationDate!: Date | null;

  @ApiProperty({
    required: true,
    type: () => Organization,
  })
  @ValidateNested()
  @Type(() => Organization)
  organization?: Organization;

  @ApiProperty({
    required: true,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  inviter?: User;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  code!: string;

  @ApiProperty({
    required: false,
    type: () => [OrganizationMember],
  })
  @ValidateNested()
  @Type(() => OrganizationMember)
  @IsOptional()
  organizationMembers?: Array<OrganizationMember>;
}

export { Invitation as Invitation };
