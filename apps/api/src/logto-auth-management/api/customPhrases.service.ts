/**
 * Logto API references
 * API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.
 *
 * The version of the OpenAPI document: Cloud
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ListCustomPhrases200ResponseInner } from '../model/listCustomPhrases200ResponseInner';
import { TranslationObject } from '../model/translationObject';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class CustomPhrasesService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Delete custom phrase
     * Delete custom phrases for the specified language tag.
     * @param languageTag 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCustomPhrase(languageTag: 'af-ZA' | 'am-ET' | 'ar-AR' | 'as-IN' | 'az-AZ' | 'be-BY' | 'bg-BG' | 'bn-IN' | 'br-FR' | 'bs-BA' | 'ca-ES' | 'cb-IQ' | 'co-FR' | 'cs-CZ' | 'cx-PH' | 'cy-GB' | 'da-DK' | 'de' | 'de-DE' | 'el-GR' | 'en' | 'en-GB' | 'en-US' | 'eo-EO' | 'es' | 'es-ES' | 'es-419' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'ff-NG' | 'fi-FI' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fy-NL' | 'ga-IE' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'ha-NG' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'ht-HT' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ik-US' | 'is-IS' | 'it' | 'it-IT' | 'iu-CA' | 'ja' | 'ja-JP' | 'ja-KS' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km-KH' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'ky-KG' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mg-MG' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mr-IN' | 'ms-MY' | 'mt-MT' | 'my-MM' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru' | 'ru-RU' | 'rw-RW' | 'sc-IT' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sn-ZW' | 'sq-AL' | 'sr-RS' | 'sv-SE' | 'sw-KE' | 'sy-SY' | 'sz-PL' | 'ta-IN' | 'te-IN' | 'tg-TJ' | 'th-TH' | 'tl-PH' | 'tr' | 'tr-TR' | 'tt-RU' | 'tz-MA' | 'uk-UA' | 'ur-PK' | 'uz-UZ' | 'vi-VN' | 'zh' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-TW' | 'zz-TR', ): Observable<AxiosResponse<any>>;
    public deleteCustomPhrase(languageTag: 'af-ZA' | 'am-ET' | 'ar-AR' | 'as-IN' | 'az-AZ' | 'be-BY' | 'bg-BG' | 'bn-IN' | 'br-FR' | 'bs-BA' | 'ca-ES' | 'cb-IQ' | 'co-FR' | 'cs-CZ' | 'cx-PH' | 'cy-GB' | 'da-DK' | 'de' | 'de-DE' | 'el-GR' | 'en' | 'en-GB' | 'en-US' | 'eo-EO' | 'es' | 'es-ES' | 'es-419' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'ff-NG' | 'fi-FI' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fy-NL' | 'ga-IE' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'ha-NG' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'ht-HT' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ik-US' | 'is-IS' | 'it' | 'it-IT' | 'iu-CA' | 'ja' | 'ja-JP' | 'ja-KS' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km-KH' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'ky-KG' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mg-MG' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mr-IN' | 'ms-MY' | 'mt-MT' | 'my-MM' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru' | 'ru-RU' | 'rw-RW' | 'sc-IT' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sn-ZW' | 'sq-AL' | 'sr-RS' | 'sv-SE' | 'sw-KE' | 'sy-SY' | 'sz-PL' | 'ta-IN' | 'te-IN' | 'tg-TJ' | 'th-TH' | 'tl-PH' | 'tr' | 'tr-TR' | 'tt-RU' | 'tz-MA' | 'uk-UA' | 'ur-PK' | 'uz-UZ' | 'vi-VN' | 'zh' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-TW' | 'zz-TR', ): Observable<any> {
        if (languageTag === null || languageTag === undefined) {
            throw new Error('Required parameter languageTag was null or undefined when calling deleteCustomPhrase.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/custom-phrases/${encodeURIComponent(String(languageTag))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get custom phrases
     * Get custom phrases for the specified language tag.
     * @param languageTag 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCustomPhrase(languageTag: 'af-ZA' | 'am-ET' | 'ar-AR' | 'as-IN' | 'az-AZ' | 'be-BY' | 'bg-BG' | 'bn-IN' | 'br-FR' | 'bs-BA' | 'ca-ES' | 'cb-IQ' | 'co-FR' | 'cs-CZ' | 'cx-PH' | 'cy-GB' | 'da-DK' | 'de' | 'de-DE' | 'el-GR' | 'en' | 'en-GB' | 'en-US' | 'eo-EO' | 'es' | 'es-ES' | 'es-419' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'ff-NG' | 'fi-FI' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fy-NL' | 'ga-IE' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'ha-NG' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'ht-HT' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ik-US' | 'is-IS' | 'it' | 'it-IT' | 'iu-CA' | 'ja' | 'ja-JP' | 'ja-KS' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km-KH' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'ky-KG' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mg-MG' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mr-IN' | 'ms-MY' | 'mt-MT' | 'my-MM' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru' | 'ru-RU' | 'rw-RW' | 'sc-IT' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sn-ZW' | 'sq-AL' | 'sr-RS' | 'sv-SE' | 'sw-KE' | 'sy-SY' | 'sz-PL' | 'ta-IN' | 'te-IN' | 'tg-TJ' | 'th-TH' | 'tl-PH' | 'tr' | 'tr-TR' | 'tt-RU' | 'tz-MA' | 'uk-UA' | 'ur-PK' | 'uz-UZ' | 'vi-VN' | 'zh' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-TW' | 'zz-TR', ): Observable<AxiosResponse<ListCustomPhrases200ResponseInner>>;
    public getCustomPhrase(languageTag: 'af-ZA' | 'am-ET' | 'ar-AR' | 'as-IN' | 'az-AZ' | 'be-BY' | 'bg-BG' | 'bn-IN' | 'br-FR' | 'bs-BA' | 'ca-ES' | 'cb-IQ' | 'co-FR' | 'cs-CZ' | 'cx-PH' | 'cy-GB' | 'da-DK' | 'de' | 'de-DE' | 'el-GR' | 'en' | 'en-GB' | 'en-US' | 'eo-EO' | 'es' | 'es-ES' | 'es-419' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'ff-NG' | 'fi-FI' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fy-NL' | 'ga-IE' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'ha-NG' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'ht-HT' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ik-US' | 'is-IS' | 'it' | 'it-IT' | 'iu-CA' | 'ja' | 'ja-JP' | 'ja-KS' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km-KH' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'ky-KG' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mg-MG' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mr-IN' | 'ms-MY' | 'mt-MT' | 'my-MM' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru' | 'ru-RU' | 'rw-RW' | 'sc-IT' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sn-ZW' | 'sq-AL' | 'sr-RS' | 'sv-SE' | 'sw-KE' | 'sy-SY' | 'sz-PL' | 'ta-IN' | 'te-IN' | 'tg-TJ' | 'th-TH' | 'tl-PH' | 'tr' | 'tr-TR' | 'tt-RU' | 'tz-MA' | 'uk-UA' | 'ur-PK' | 'uz-UZ' | 'vi-VN' | 'zh' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-TW' | 'zz-TR', ): Observable<any> {
        if (languageTag === null || languageTag === undefined) {
            throw new Error('Required parameter languageTag was null or undefined when calling getCustomPhrase.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<ListCustomPhrases200ResponseInner>(`${this.basePath}/api/custom-phrases/${encodeURIComponent(String(languageTag))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get all custom phrases
     * Get all custom phrases for all languages.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCustomPhrases(): Observable<AxiosResponse<Array<ListCustomPhrases200ResponseInner>>>;
    public listCustomPhrases(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListCustomPhrases200ResponseInner>>(`${this.basePath}/api/custom-phrases`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Upsert custom phrases
     * Upsert custom phrases for the specified language tag. Upsert means that if the custom phrases already exist, they will be updated. Otherwise, they will be created.
     * @param languageTag 
     * @param translationObject 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceCustomPhrase(languageTag: 'af-ZA' | 'am-ET' | 'ar-AR' | 'as-IN' | 'az-AZ' | 'be-BY' | 'bg-BG' | 'bn-IN' | 'br-FR' | 'bs-BA' | 'ca-ES' | 'cb-IQ' | 'co-FR' | 'cs-CZ' | 'cx-PH' | 'cy-GB' | 'da-DK' | 'de' | 'de-DE' | 'el-GR' | 'en' | 'en-GB' | 'en-US' | 'eo-EO' | 'es' | 'es-ES' | 'es-419' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'ff-NG' | 'fi-FI' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fy-NL' | 'ga-IE' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'ha-NG' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'ht-HT' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ik-US' | 'is-IS' | 'it' | 'it-IT' | 'iu-CA' | 'ja' | 'ja-JP' | 'ja-KS' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km-KH' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'ky-KG' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mg-MG' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mr-IN' | 'ms-MY' | 'mt-MT' | 'my-MM' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru' | 'ru-RU' | 'rw-RW' | 'sc-IT' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sn-ZW' | 'sq-AL' | 'sr-RS' | 'sv-SE' | 'sw-KE' | 'sy-SY' | 'sz-PL' | 'ta-IN' | 'te-IN' | 'tg-TJ' | 'th-TH' | 'tl-PH' | 'tr' | 'tr-TR' | 'tt-RU' | 'tz-MA' | 'uk-UA' | 'ur-PK' | 'uz-UZ' | 'vi-VN' | 'zh' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-TW' | 'zz-TR', translationObject: TranslationObject, ): Observable<AxiosResponse<any>>;
    public replaceCustomPhrase(languageTag: 'af-ZA' | 'am-ET' | 'ar-AR' | 'as-IN' | 'az-AZ' | 'be-BY' | 'bg-BG' | 'bn-IN' | 'br-FR' | 'bs-BA' | 'ca-ES' | 'cb-IQ' | 'co-FR' | 'cs-CZ' | 'cx-PH' | 'cy-GB' | 'da-DK' | 'de' | 'de-DE' | 'el-GR' | 'en' | 'en-GB' | 'en-US' | 'eo-EO' | 'es' | 'es-ES' | 'es-419' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'ff-NG' | 'fi-FI' | 'fo-FO' | 'fr' | 'fr-CA' | 'fr-FR' | 'fy-NL' | 'ga-IE' | 'gl-ES' | 'gn-PY' | 'gu-IN' | 'ha-NG' | 'he-IL' | 'hi-IN' | 'hr-HR' | 'ht-HT' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ik-US' | 'is-IS' | 'it' | 'it-IT' | 'iu-CA' | 'ja' | 'ja-JP' | 'ja-KS' | 'jv-ID' | 'ka-GE' | 'kk-KZ' | 'km-KH' | 'kn-IN' | 'ko' | 'ko-KR' | 'ku-TR' | 'ky-KG' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mg-MG' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mr-IN' | 'ms-MY' | 'mt-MT' | 'my-MM' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'ps-AF' | 'pt' | 'pt-BR' | 'pt-PT' | 'ro-RO' | 'ru' | 'ru-RU' | 'rw-RW' | 'sc-IT' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sn-ZW' | 'sq-AL' | 'sr-RS' | 'sv-SE' | 'sw-KE' | 'sy-SY' | 'sz-PL' | 'ta-IN' | 'te-IN' | 'tg-TJ' | 'th-TH' | 'tl-PH' | 'tr' | 'tr-TR' | 'tt-RU' | 'tz-MA' | 'uk-UA' | 'ur-PK' | 'uz-UZ' | 'vi-VN' | 'zh' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-TW' | 'zz-TR', translationObject: TranslationObject, ): Observable<any> {
        if (languageTag === null || languageTag === undefined) {
            throw new Error('Required parameter languageTag was null or undefined when calling replaceCustomPhrase.');
        }

        if (translationObject === null || translationObject === undefined) {
            throw new Error('Required parameter translationObject was null or undefined when calling replaceCustomPhrase.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/custom-phrases/${encodeURIComponent(String(languageTag))}`,
                    translationObject,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
