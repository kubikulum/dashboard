/**
 * Logto API references
 * API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.
 *
 * The version of the OpenAPI document: Cloud
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ApiInteractionBindMfaPostRequest } from '../model/apiInteractionBindMfaPostRequest';
import { ApiInteractionConsentGet200Response } from '../model/apiInteractionConsentGet200Response';
import { ApiInteractionConsentPostRequest } from '../model/apiInteractionConsentPostRequest';
import { ApiInteractionEventPutRequest } from '../model/apiInteractionEventPutRequest';
import { ApiInteractionMfaPutRequest } from '../model/apiInteractionMfaPutRequest';
import { ApiInteractionMfaSkippedPutRequest } from '../model/apiInteractionMfaSkippedPutRequest';
import { ApiInteractionPutRequest } from '../model/apiInteractionPutRequest';
import { ApiInteractionPutRequestIdentifier } from '../model/apiInteractionPutRequestIdentifier';
import { ApiInteractionPutRequestProfile } from '../model/apiInteractionPutRequestProfile';
import { ApiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest } from '../model/apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest';
import { ApiInteractionSubmitPost200Response } from '../model/apiInteractionSubmitPost200Response';
import { ApiInteractionVerificationSocialAuthorizationUriPostRequest } from '../model/apiInteractionVerificationSocialAuthorizationUriPostRequest';
import { ApiInteractionVerificationTotpPost200Response } from '../model/apiInteractionVerificationTotpPost200Response';
import { ApiInteractionVerificationVerificationCodePostRequest } from '../model/apiInteractionVerificationVerificationCodePostRequest';
import { ApiInteractionVerificationWebauthnAuthenticationPost200Response } from '../model/apiInteractionVerificationWebauthnAuthenticationPost200Response';
import { ApiInteractionVerificationWebauthnRegistrationPost200Response } from '../model/apiInteractionVerificationWebauthnRegistrationPost200Response';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class InteractionService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * 
     * 
     * @param apiInteractionBindMfaPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionBindMfaPost(apiInteractionBindMfaPostRequest: ApiInteractionBindMfaPostRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionBindMfaPost(apiInteractionBindMfaPostRequest: ApiInteractionBindMfaPostRequest, ): Observable<any> {
        if (apiInteractionBindMfaPostRequest === null || apiInteractionBindMfaPostRequest === undefined) {
            throw new Error('Required parameter apiInteractionBindMfaPostRequest was null or undefined when calling apiInteractionBindMfaPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/interaction/bind-mfa`,
                    apiInteractionBindMfaPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionConsentGet(): Observable<AxiosResponse<ApiInteractionConsentGet200Response>>;
    public apiInteractionConsentGet(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<ApiInteractionConsentGet200Response>(`${this.basePath}/api/interaction/consent`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionConsentPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionConsentPost(apiInteractionConsentPostRequest: ApiInteractionConsentPostRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionConsentPost(apiInteractionConsentPostRequest: ApiInteractionConsentPostRequest, ): Observable<any> {
        if (apiInteractionConsentPostRequest === null || apiInteractionConsentPostRequest === undefined) {
            throw new Error('Required parameter apiInteractionConsentPostRequest was null or undefined when calling apiInteractionConsentPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/interaction/consent`,
                    apiInteractionConsentPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionDelete(): Observable<AxiosResponse<any>>;
    public apiInteractionDelete(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/interaction`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionEventPutRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionEventPut(apiInteractionEventPutRequest: ApiInteractionEventPutRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionEventPut(apiInteractionEventPutRequest: ApiInteractionEventPutRequest, ): Observable<any> {
        if (apiInteractionEventPutRequest === null || apiInteractionEventPutRequest === undefined) {
            throw new Error('Required parameter apiInteractionEventPutRequest was null or undefined when calling apiInteractionEventPut.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/interaction/event`,
                    apiInteractionEventPutRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionPutRequestIdentifier 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionIdentifiersPatch(apiInteractionPutRequestIdentifier: ApiInteractionPutRequestIdentifier, ): Observable<AxiosResponse<any>>;
    public apiInteractionIdentifiersPatch(apiInteractionPutRequestIdentifier: ApiInteractionPutRequestIdentifier, ): Observable<any> {
        if (apiInteractionPutRequestIdentifier === null || apiInteractionPutRequestIdentifier === undefined) {
            throw new Error('Required parameter apiInteractionPutRequestIdentifier was null or undefined when calling apiInteractionIdentifiersPatch.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/api/interaction/identifiers`,
                    apiInteractionPutRequestIdentifier,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionMfaPutRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionMfaPut(apiInteractionMfaPutRequest: ApiInteractionMfaPutRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionMfaPut(apiInteractionMfaPutRequest: ApiInteractionMfaPutRequest, ): Observable<any> {
        if (apiInteractionMfaPutRequest === null || apiInteractionMfaPutRequest === undefined) {
            throw new Error('Required parameter apiInteractionMfaPutRequest was null or undefined when calling apiInteractionMfaPut.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/interaction/mfa`,
                    apiInteractionMfaPutRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionMfaSkippedPutRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionMfaSkippedPut(apiInteractionMfaSkippedPutRequest: ApiInteractionMfaSkippedPutRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionMfaSkippedPut(apiInteractionMfaSkippedPutRequest: ApiInteractionMfaSkippedPutRequest, ): Observable<any> {
        if (apiInteractionMfaSkippedPutRequest === null || apiInteractionMfaSkippedPutRequest === undefined) {
            throw new Error('Required parameter apiInteractionMfaSkippedPutRequest was null or undefined when calling apiInteractionMfaSkippedPut.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/interaction/mfa-skipped`,
                    apiInteractionMfaSkippedPutRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionProfileDelete(): Observable<AxiosResponse<any>>;
    public apiInteractionProfileDelete(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/interaction/profile`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionPutRequestProfile 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionProfilePatch(apiInteractionPutRequestProfile: ApiInteractionPutRequestProfile, ): Observable<AxiosResponse<any>>;
    public apiInteractionProfilePatch(apiInteractionPutRequestProfile: ApiInteractionPutRequestProfile, ): Observable<any> {
        if (apiInteractionPutRequestProfile === null || apiInteractionPutRequestProfile === undefined) {
            throw new Error('Required parameter apiInteractionPutRequestProfile was null or undefined when calling apiInteractionProfilePatch.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<any>(`${this.basePath}/api/interaction/profile`,
                    apiInteractionPutRequestProfile,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionPutRequestProfile 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionProfilePut(apiInteractionPutRequestProfile: ApiInteractionPutRequestProfile, ): Observable<AxiosResponse<any>>;
    public apiInteractionProfilePut(apiInteractionPutRequestProfile: ApiInteractionPutRequestProfile, ): Observable<any> {
        if (apiInteractionPutRequestProfile === null || apiInteractionPutRequestProfile === undefined) {
            throw new Error('Required parameter apiInteractionPutRequestProfile was null or undefined when calling apiInteractionProfilePut.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/interaction/profile`,
                    apiInteractionPutRequestProfile,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionPutRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionPut(apiInteractionPutRequest: ApiInteractionPutRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionPut(apiInteractionPutRequest: ApiInteractionPutRequest, ): Observable<any> {
        if (apiInteractionPutRequest === null || apiInteractionPutRequest === undefined) {
            throw new Error('Required parameter apiInteractionPutRequest was null or undefined when calling apiInteractionPut.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/interaction`,
                    apiInteractionPutRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param connectorId The unique identifier of the connector.
     * @param requestBody 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionSingleSignOnConnectorIdAuthenticationPost(connectorId: string, requestBody: { [key: string]: any; }, ): Observable<AxiosResponse<ApiInteractionSubmitPost200Response>>;
    public apiInteractionSingleSignOnConnectorIdAuthenticationPost(connectorId: string, requestBody: { [key: string]: any; }, ): Observable<any> {
        if (connectorId === null || connectorId === undefined) {
            throw new Error('Required parameter connectorId was null or undefined when calling apiInteractionSingleSignOnConnectorIdAuthenticationPost.');
        }

        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling apiInteractionSingleSignOnConnectorIdAuthenticationPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionSubmitPost200Response>(`${this.basePath}/api/interaction/single-sign-on/${encodeURIComponent(String(connectorId))}/authentication`,
                    requestBody,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param connectorId The unique identifier of the connector.
     * @param apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionSingleSignOnConnectorIdAuthorizationUrlPost(connectorId: string, apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest: ApiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest, ): Observable<AxiosResponse<ApiInteractionSubmitPost200Response>>;
    public apiInteractionSingleSignOnConnectorIdAuthorizationUrlPost(connectorId: string, apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest: ApiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest, ): Observable<any> {
        if (connectorId === null || connectorId === undefined) {
            throw new Error('Required parameter connectorId was null or undefined when calling apiInteractionSingleSignOnConnectorIdAuthorizationUrlPost.');
        }

        if (apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest === null || apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest === undefined) {
            throw new Error('Required parameter apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest was null or undefined when calling apiInteractionSingleSignOnConnectorIdAuthorizationUrlPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionSubmitPost200Response>(`${this.basePath}/api/interaction/single-sign-on/${encodeURIComponent(String(connectorId))}/authorization-url`,
                    apiInteractionSingleSignOnConnectorIdAuthorizationUrlPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param connectorId The unique identifier of the connector.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionSingleSignOnConnectorIdRegistrationPost(connectorId: string, ): Observable<AxiosResponse<ApiInteractionSubmitPost200Response>>;
    public apiInteractionSingleSignOnConnectorIdRegistrationPost(connectorId: string, ): Observable<any> {
        if (connectorId === null || connectorId === undefined) {
            throw new Error('Required parameter connectorId was null or undefined when calling apiInteractionSingleSignOnConnectorIdRegistrationPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionSubmitPost200Response>(`${this.basePath}/api/interaction/single-sign-on/${encodeURIComponent(String(connectorId))}/registration`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param email 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionSingleSignOnConnectorsGet(email: string, ): Observable<AxiosResponse<Array<string>>>;
    public apiInteractionSingleSignOnConnectorsGet(email: string, ): Observable<any> {
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling apiInteractionSingleSignOnConnectorsGet.');
        }

        let queryParameters = new URLSearchParams();
        if (email !== undefined && email !== null) {
            queryParameters.append('email', <any>email);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<string>>(`${this.basePath}/api/interaction/single-sign-on/connectors`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionSubmitPost(): Observable<AxiosResponse<ApiInteractionSubmitPost200Response>>;
    public apiInteractionSubmitPost(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionSubmitPost200Response>(`${this.basePath}/api/interaction/submit`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionVerificationSocialAuthorizationUriPostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionVerificationSocialAuthorizationUriPost(apiInteractionVerificationSocialAuthorizationUriPostRequest: ApiInteractionVerificationSocialAuthorizationUriPostRequest, ): Observable<AxiosResponse<ApiInteractionSubmitPost200Response>>;
    public apiInteractionVerificationSocialAuthorizationUriPost(apiInteractionVerificationSocialAuthorizationUriPostRequest: ApiInteractionVerificationSocialAuthorizationUriPostRequest, ): Observable<any> {
        if (apiInteractionVerificationSocialAuthorizationUriPostRequest === null || apiInteractionVerificationSocialAuthorizationUriPostRequest === undefined) {
            throw new Error('Required parameter apiInteractionVerificationSocialAuthorizationUriPostRequest was null or undefined when calling apiInteractionVerificationSocialAuthorizationUriPost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionSubmitPost200Response>(`${this.basePath}/api/interaction/verification/social-authorization-uri`,
                    apiInteractionVerificationSocialAuthorizationUriPostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionVerificationTotpPost(): Observable<AxiosResponse<ApiInteractionVerificationTotpPost200Response>>;
    public apiInteractionVerificationTotpPost(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionVerificationTotpPost200Response>(`${this.basePath}/api/interaction/verification/totp`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param apiInteractionVerificationVerificationCodePostRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionVerificationVerificationCodePost(apiInteractionVerificationVerificationCodePostRequest: ApiInteractionVerificationVerificationCodePostRequest, ): Observable<AxiosResponse<any>>;
    public apiInteractionVerificationVerificationCodePost(apiInteractionVerificationVerificationCodePostRequest: ApiInteractionVerificationVerificationCodePostRequest, ): Observable<any> {
        if (apiInteractionVerificationVerificationCodePostRequest === null || apiInteractionVerificationVerificationCodePostRequest === undefined) {
            throw new Error('Required parameter apiInteractionVerificationVerificationCodePostRequest was null or undefined when calling apiInteractionVerificationVerificationCodePost.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/interaction/verification/verification-code`,
                    apiInteractionVerificationVerificationCodePostRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionVerificationWebauthnAuthenticationPost(): Observable<AxiosResponse<ApiInteractionVerificationWebauthnAuthenticationPost200Response>>;
    public apiInteractionVerificationWebauthnAuthenticationPost(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionVerificationWebauthnAuthenticationPost200Response>(`${this.basePath}/api/interaction/verification/webauthn-authentication`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public apiInteractionVerificationWebauthnRegistrationPost(): Observable<AxiosResponse<ApiInteractionVerificationWebauthnRegistrationPost200Response>>;
    public apiInteractionVerificationWebauthnRegistrationPost(): Observable<any> {
        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<ApiInteractionVerificationWebauthnRegistrationPost200Response>(`${this.basePath}/api/interaction/verification/webauthn-registration`,
                    null,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
