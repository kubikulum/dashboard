/**
 * Logto API references
 * API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.
 *
 * The version of the OpenAPI document: Cloud
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { AddOrganizationApplicationsRequest } from '../model/addOrganizationApplicationsRequest';
import { AddOrganizationUsersRequest } from '../model/addOrganizationUsersRequest';
import { AssignOrganizationRolesToApplicationRequest } from '../model/assignOrganizationRolesToApplicationRequest';
import { AssignOrganizationRolesToApplicationsRequest } from '../model/assignOrganizationRolesToApplicationsRequest';
import { AssignOrganizationRolesToUserRequest } from '../model/assignOrganizationRolesToUserRequest';
import { AssignOrganizationRolesToUsersRequest } from '../model/assignOrganizationRolesToUsersRequest';
import { CreateOrganizationJitEmailDomainRequest } from '../model/createOrganizationJitEmailDomainRequest';
import { CreateOrganizationJitRoleRequest } from '../model/createOrganizationJitRoleRequest';
import { CreateOrganizationJitSsoConnectorRequest } from '../model/createOrganizationJitSsoConnectorRequest';
import { CreateOrganizationRequest } from '../model/createOrganizationRequest';
import { GetOrganizationRole200Response } from '../model/getOrganizationRole200Response';
import { ListApplicationUserConsentOrganizations200ResponseOrganizationsInner } from '../model/listApplicationUserConsentOrganizations200ResponseOrganizationsInner';
import { ListOrganizationApplications200ResponseInner } from '../model/listOrganizationApplications200ResponseInner';
import { ListOrganizationJitEmailDomains200ResponseInner } from '../model/listOrganizationJitEmailDomains200ResponseInner';
import { ListOrganizationJitSsoConnectors200ResponseInner } from '../model/listOrganizationJitSsoConnectors200ResponseInner';
import { ListOrganizationRoleScopes200ResponseInner } from '../model/listOrganizationRoleScopes200ResponseInner';
import { ListOrganizationUsers200ResponseInner } from '../model/listOrganizationUsers200ResponseInner';
import { ListOrganizations200ResponseInner } from '../model/listOrganizations200ResponseInner';
import { ReplaceOrganizationApplicationRolesRequest } from '../model/replaceOrganizationApplicationRolesRequest';
import { ReplaceOrganizationApplicationsRequest } from '../model/replaceOrganizationApplicationsRequest';
import { ReplaceOrganizationJitEmailDomainsRequest } from '../model/replaceOrganizationJitEmailDomainsRequest';
import { ReplaceOrganizationJitRolesRequest } from '../model/replaceOrganizationJitRolesRequest';
import { ReplaceOrganizationJitSsoConnectorsRequest } from '../model/replaceOrganizationJitSsoConnectorsRequest';
import { ReplaceOrganizationUserRolesRequest } from '../model/replaceOrganizationUserRolesRequest';
import { ReplaceOrganizationUsersRequest } from '../model/replaceOrganizationUsersRequest';
import { UpdateOrganizationRequest } from '../model/updateOrganizationRequest';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class OrganizationsService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Add organization application
     * Add an application to the organization.
     * @param id The unique identifier of the organization.
     * @param addOrganizationApplicationsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addOrganizationApplications(id: string, addOrganizationApplicationsRequest: AddOrganizationApplicationsRequest, ): Observable<AxiosResponse<any>>;
    public addOrganizationApplications(id: string, addOrganizationApplicationsRequest: AddOrganizationApplicationsRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addOrganizationApplications.');
        }

        if (addOrganizationApplicationsRequest === null || addOrganizationApplicationsRequest === undefined) {
            throw new Error('Required parameter addOrganizationApplicationsRequest was null or undefined when calling addOrganizationApplications.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications`,
                    addOrganizationApplicationsRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Add user members to organization
     * Add users as members to the specified organization with the given user IDs.
     * @param id The unique identifier of the organization.
     * @param addOrganizationUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addOrganizationUsers(id: string, addOrganizationUsersRequest: AddOrganizationUsersRequest, ): Observable<AxiosResponse<any>>;
    public addOrganizationUsers(id: string, addOrganizationUsersRequest: AddOrganizationUsersRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addOrganizationUsers.');
        }

        if (addOrganizationUsersRequest === null || addOrganizationUsersRequest === undefined) {
            throw new Error('Required parameter addOrganizationUsersRequest was null or undefined when calling addOrganizationUsers.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users`,
                    addOrganizationUsersRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Add organization application role
     * Add a role to the application in the organization.
     * @param id The unique identifier of the organization.
     * @param applicationId The unique identifier of the application.
     * @param assignOrganizationRolesToApplicationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignOrganizationRolesToApplication(id: string, applicationId: string, assignOrganizationRolesToApplicationRequest: AssignOrganizationRolesToApplicationRequest, ): Observable<AxiosResponse<any>>;
    public assignOrganizationRolesToApplication(id: string, applicationId: string, assignOrganizationRolesToApplicationRequest: AssignOrganizationRolesToApplicationRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling assignOrganizationRolesToApplication.');
        }

        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling assignOrganizationRolesToApplication.');
        }

        if (assignOrganizationRolesToApplicationRequest === null || assignOrganizationRolesToApplicationRequest === undefined) {
            throw new Error('Required parameter assignOrganizationRolesToApplicationRequest was null or undefined when calling assignOrganizationRolesToApplication.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications/${encodeURIComponent(String(applicationId))}/roles`,
                    assignOrganizationRolesToApplicationRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Assign roles to applications in an organization
     * Assign roles to applications in the specified organization.
     * @param id The unique identifier of the organization.
     * @param assignOrganizationRolesToApplicationsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignOrganizationRolesToApplications(id: string, assignOrganizationRolesToApplicationsRequest: AssignOrganizationRolesToApplicationsRequest, ): Observable<AxiosResponse<any>>;
    public assignOrganizationRolesToApplications(id: string, assignOrganizationRolesToApplicationsRequest: AssignOrganizationRolesToApplicationsRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling assignOrganizationRolesToApplications.');
        }

        if (assignOrganizationRolesToApplicationsRequest === null || assignOrganizationRolesToApplicationsRequest === undefined) {
            throw new Error('Required parameter assignOrganizationRolesToApplicationsRequest was null or undefined when calling assignOrganizationRolesToApplications.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications/roles`,
                    assignOrganizationRolesToApplicationsRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Assign roles to a user in an organization
     * Assign roles to a user in the specified organization with the provided data.
     * @param id The unique identifier of the organization.
     * @param userId The unique identifier of the user.
     * @param assignOrganizationRolesToUserRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignOrganizationRolesToUser(id: string, userId: string, assignOrganizationRolesToUserRequest: AssignOrganizationRolesToUserRequest, ): Observable<AxiosResponse<any>>;
    public assignOrganizationRolesToUser(id: string, userId: string, assignOrganizationRolesToUserRequest: AssignOrganizationRolesToUserRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling assignOrganizationRolesToUser.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling assignOrganizationRolesToUser.');
        }

        if (assignOrganizationRolesToUserRequest === null || assignOrganizationRolesToUserRequest === undefined) {
            throw new Error('Required parameter assignOrganizationRolesToUserRequest was null or undefined when calling assignOrganizationRolesToUser.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/${encodeURIComponent(String(userId))}/roles`,
                    assignOrganizationRolesToUserRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Assign roles to organization user members
     * Assign roles to user members of the specified organization.
     * @param id The unique identifier of the organization.
     * @param assignOrganizationRolesToUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignOrganizationRolesToUsers(id: string, assignOrganizationRolesToUsersRequest: AssignOrganizationRolesToUsersRequest, ): Observable<AxiosResponse<any>>;
    public assignOrganizationRolesToUsers(id: string, assignOrganizationRolesToUsersRequest: AssignOrganizationRolesToUsersRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling assignOrganizationRolesToUsers.');
        }

        if (assignOrganizationRolesToUsersRequest === null || assignOrganizationRolesToUsersRequest === undefined) {
            throw new Error('Required parameter assignOrganizationRolesToUsersRequest was null or undefined when calling assignOrganizationRolesToUsers.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/roles`,
                    assignOrganizationRolesToUsersRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Create an organization
     * Create a new organization with the given data.
     * @param createOrganizationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganization(createOrganizationRequest: CreateOrganizationRequest, ): Observable<AxiosResponse<any>>;
    public createOrganization(createOrganizationRequest: CreateOrganizationRequest, ): Observable<any> {
        if (createOrganizationRequest === null || createOrganizationRequest === undefined) {
            throw new Error('Required parameter createOrganizationRequest was null or undefined when calling createOrganization.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations`,
                    createOrganizationRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Add organization JIT email domain
     * Add a new email domain for just-in-time provisioning of users in the organization.
     * @param id The unique identifier of the organization.
     * @param createOrganizationJitEmailDomainRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganizationJitEmailDomain(id: string, createOrganizationJitEmailDomainRequest: CreateOrganizationJitEmailDomainRequest, ): Observable<AxiosResponse<any>>;
    public createOrganizationJitEmailDomain(id: string, createOrganizationJitEmailDomainRequest: CreateOrganizationJitEmailDomainRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createOrganizationJitEmailDomain.');
        }

        if (createOrganizationJitEmailDomainRequest === null || createOrganizationJitEmailDomainRequest === undefined) {
            throw new Error('Required parameter createOrganizationJitEmailDomainRequest was null or undefined when calling createOrganizationJitEmailDomain.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/email-domains`,
                    createOrganizationJitEmailDomainRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Add organization JIT default roles
     * Add new organization roles that will be assigned to users during just-in-time provisioning.
     * @param id The unique identifier of the organization.
     * @param createOrganizationJitRoleRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganizationJitRole(id: string, createOrganizationJitRoleRequest: CreateOrganizationJitRoleRequest, ): Observable<AxiosResponse<any>>;
    public createOrganizationJitRole(id: string, createOrganizationJitRoleRequest: CreateOrganizationJitRoleRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createOrganizationJitRole.');
        }

        if (createOrganizationJitRoleRequest === null || createOrganizationJitRoleRequest === undefined) {
            throw new Error('Required parameter createOrganizationJitRoleRequest was null or undefined when calling createOrganizationJitRole.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/roles`,
                    createOrganizationJitRoleRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Add organization JIT SSO connectors
     * Add new enterprise SSO connectors for just-in-time provisioning of users in the organization.
     * @param id The unique identifier of the organization.
     * @param createOrganizationJitSsoConnectorRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createOrganizationJitSsoConnector(id: string, createOrganizationJitSsoConnectorRequest: CreateOrganizationJitSsoConnectorRequest, ): Observable<AxiosResponse<any>>;
    public createOrganizationJitSsoConnector(id: string, createOrganizationJitSsoConnectorRequest: CreateOrganizationJitSsoConnectorRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createOrganizationJitSsoConnector.');
        }

        if (createOrganizationJitSsoConnectorRequest === null || createOrganizationJitSsoConnectorRequest === undefined) {
            throw new Error('Required parameter createOrganizationJitSsoConnectorRequest was null or undefined when calling createOrganizationJitSsoConnector.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/sso-connectors`,
                    createOrganizationJitSsoConnectorRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Delete organization
     * Delete organization by ID.
     * @param id The unique identifier of the organization.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganization(id: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganization(id: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganization.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove organization application
     * Remove an application from the organization.
     * @param id The unique identifier of the organization.
     * @param applicationId The unique identifier of the application.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationApplication(id: string, applicationId: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationApplication(id: string, applicationId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationApplication.');
        }

        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling deleteOrganizationApplication.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications/${encodeURIComponent(String(applicationId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove organization application role
     * Remove a role from the application in the organization.
     * @param id The unique identifier of the organization.
     * @param applicationId The unique identifier of the application.
     * @param organizationRoleId The unique identifier of the organization role.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationApplicationRole(id: string, applicationId: string, organizationRoleId: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationApplicationRole(id: string, applicationId: string, organizationRoleId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationApplicationRole.');
        }

        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling deleteOrganizationApplicationRole.');
        }

        if (organizationRoleId === null || organizationRoleId === undefined) {
            throw new Error('Required parameter organizationRoleId was null or undefined when calling deleteOrganizationApplicationRole.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications/${encodeURIComponent(String(applicationId))}/roles/${encodeURIComponent(String(organizationRoleId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove organization JIT email domain
     * Remove an email domain for just-in-time provisioning of users in the organization.
     * @param id The unique identifier of the organization.
     * @param emailDomain The email domain to remove.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationJitEmailDomain(id: string, emailDomain: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationJitEmailDomain(id: string, emailDomain: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationJitEmailDomain.');
        }

        if (emailDomain === null || emailDomain === undefined) {
            throw new Error('Required parameter emailDomain was null or undefined when calling deleteOrganizationJitEmailDomain.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/email-domains/${encodeURIComponent(String(emailDomain))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove organization JIT default role
     * Remove an organization role that will be assigned to users during just-in-time provisioning.
     * @param id The unique identifier of the organization.
     * @param organizationRoleId The unique identifier of the organization role.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationJitRole(id: string, organizationRoleId: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationJitRole(id: string, organizationRoleId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationJitRole.');
        }

        if (organizationRoleId === null || organizationRoleId === undefined) {
            throw new Error('Required parameter organizationRoleId was null or undefined when calling deleteOrganizationJitRole.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/roles/${encodeURIComponent(String(organizationRoleId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove organization JIT SSO connector
     * Remove an enterprise SSO connector for just-in-time provisioning of users in the organization.
     * @param id The unique identifier of the organization.
     * @param ssoConnectorId The unique identifier of the sso connector.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationJitSsoConnector(id: string, ssoConnectorId: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationJitSsoConnector(id: string, ssoConnectorId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationJitSsoConnector.');
        }

        if (ssoConnectorId === null || ssoConnectorId === undefined) {
            throw new Error('Required parameter ssoConnectorId was null or undefined when calling deleteOrganizationJitSsoConnector.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/sso-connectors/${encodeURIComponent(String(ssoConnectorId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove user member from organization
     * Remove a user\&#39;s membership from the specified organization.
     * @param id The unique identifier of the organization.
     * @param userId The unique identifier of the user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationUser(id: string, userId: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationUser(id: string, userId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationUser.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteOrganizationUser.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/${encodeURIComponent(String(userId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Remove a role from a user in an organization
     * Remove a role assignment from a user in the specified organization.
     * @param id The unique identifier of the organization.
     * @param userId The unique identifier of the user.
     * @param organizationRoleId The unique identifier of the organization role.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrganizationUserRole(id: string, userId: string, organizationRoleId: string, ): Observable<AxiosResponse<any>>;
    public deleteOrganizationUserRole(id: string, userId: string, organizationRoleId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteOrganizationUserRole.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteOrganizationUserRole.');
        }

        if (organizationRoleId === null || organizationRoleId === undefined) {
            throw new Error('Required parameter organizationRoleId was null or undefined when calling deleteOrganizationUserRole.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.delete<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/${encodeURIComponent(String(userId))}/roles/${encodeURIComponent(String(organizationRoleId))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization
     * Get organization details by ID.
     * @param id The unique identifier of the organization.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganization(id: string, ): Observable<AxiosResponse<ListApplicationUserConsentOrganizations200ResponseOrganizationsInner>>;
    public getOrganization(id: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getOrganization.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<ListApplicationUserConsentOrganizations200ResponseOrganizationsInner>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization application roles
     * Get roles associated with the application in the organization.
     * @param id The unique identifier of the organization.
     * @param applicationId The unique identifier of the application.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationApplicationRoles(id: string, applicationId: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<GetOrganizationRole200Response>>>;
    public listOrganizationApplicationRoles(id: string, applicationId: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationApplicationRoles.');
        }

        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling listOrganizationApplicationRoles.');
        }

        let queryParameters = new URLSearchParams();
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<GetOrganizationRole200Response>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications/${encodeURIComponent(String(applicationId))}/roles`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization applications
     * Get applications associated with the organization.
     * @param id The unique identifier of the organization.
     * @param q 
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationApplications(id: string, q?: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<ListOrganizationApplications200ResponseInner>>>;
    public listOrganizationApplications(id: string, q?: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationApplications.');
        }

        let queryParameters = new URLSearchParams();
        if (q !== undefined && q !== null) {
            queryParameters.append('q', <any>q);
        }
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListOrganizationApplications200ResponseInner>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization JIT email domains
     * Get email domains for just-in-time provisioning of users in the organization.
     * @param id The unique identifier of the organization.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationJitEmailDomains(id: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<ListOrganizationJitEmailDomains200ResponseInner>>>;
    public listOrganizationJitEmailDomains(id: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationJitEmailDomains.');
        }

        let queryParameters = new URLSearchParams();
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListOrganizationJitEmailDomains200ResponseInner>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/email-domains`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization JIT default roles
     * Get organization roles that will be assigned to users during just-in-time provisioning.
     * @param id The unique identifier of the organization.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationJitRoles(id: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<GetOrganizationRole200Response>>>;
    public listOrganizationJitRoles(id: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationJitRoles.');
        }

        let queryParameters = new URLSearchParams();
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<GetOrganizationRole200Response>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/roles`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization JIT SSO connectors
     * Get enterprise SSO connectors for just-in-time provisioning of users in the organization.
     * @param id The unique identifier of the organization.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationJitSsoConnectors(id: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<ListOrganizationJitSsoConnectors200ResponseInner>>>;
    public listOrganizationJitSsoConnectors(id: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationJitSsoConnectors.');
        }

        let queryParameters = new URLSearchParams();
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListOrganizationJitSsoConnectors200ResponseInner>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/sso-connectors`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get roles for a user in an organization
     * Get roles assigned to a user in the specified organization with pagination.
     * @param id The unique identifier of the organization.
     * @param userId The unique identifier of the user.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationUserRoles(id: string, userId: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<GetOrganizationRole200Response>>>;
    public listOrganizationUserRoles(id: string, userId: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationUserRoles.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listOrganizationUserRoles.');
        }

        let queryParameters = new URLSearchParams();
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<GetOrganizationRole200Response>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/${encodeURIComponent(String(userId))}/roles`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get scopes for a user in an organization tailored by the organization roles
     * Get scopes assigned to a user in the specified organization tailored by the organization roles. The scopes are derived from the organization roles assigned to the user.
     * @param id The unique identifier of the organization.
     * @param userId The unique identifier of the user.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationUserScopes(id: string, userId: string, ): Observable<AxiosResponse<Array<ListOrganizationRoleScopes200ResponseInner>>>;
    public listOrganizationUserScopes(id: string, userId: string, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationUserScopes.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling listOrganizationUserScopes.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListOrganizationRoleScopes200ResponseInner>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/${encodeURIComponent(String(userId))}/scopes`,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organization user members
     * Get users that are members of the specified organization for the given query with pagination.
     * @param id The unique identifier of the organization.
     * @param q The query to filter users. It will match multiple fields of users, including ID, name, username, email, and phone number.  If not provided, all users will be returned.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizationUsers(id: string, q?: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<ListOrganizationUsers200ResponseInner>>>;
    public listOrganizationUsers(id: string, q?: string, page?: number, pageSize?: number, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling listOrganizationUsers.');
        }

        let queryParameters = new URLSearchParams();
        if (q !== undefined && q !== null) {
            queryParameters.append('q', <any>q);
        }
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListOrganizationUsers200ResponseInner>>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Get organizations
     * Get organizations that match the given query with pagination.
     * @param q The query to filter organizations. It can be a partial ID or name.  If not provided, all organizations will be returned.
     * @param showFeatured Whether to show featured users in the organization. Featured users are randomly selected from the organization members.  If not provided, &#x60;featuredUsers&#x60; will not be included in the response.
     * @param page Page number (starts from 1).
     * @param pageSize Entries per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOrganizations(q?: string, showFeatured?: string, page?: number, pageSize?: number, ): Observable<AxiosResponse<Array<ListOrganizations200ResponseInner>>>;
    public listOrganizations(q?: string, showFeatured?: string, page?: number, pageSize?: number, ): Observable<any> {
        let queryParameters = new URLSearchParams();
        if (q !== undefined && q !== null) {
            queryParameters.append('q', <any>q);
        }
        if (showFeatured !== undefined && showFeatured !== null) {
            queryParameters.append('showFeatured', <any>showFeatured);
        }
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('page_size', <any>pageSize);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<Array<ListOrganizations200ResponseInner>>(`${this.basePath}/api/organizations`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replace organization application roles
     * Replace all roles associated with the application in the organization with the given data.
     * @param id The unique identifier of the organization.
     * @param applicationId The unique identifier of the application.
     * @param replaceOrganizationApplicationRolesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationApplicationRoles(id: string, applicationId: string, replaceOrganizationApplicationRolesRequest: ReplaceOrganizationApplicationRolesRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationApplicationRoles(id: string, applicationId: string, replaceOrganizationApplicationRolesRequest: ReplaceOrganizationApplicationRolesRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationApplicationRoles.');
        }

        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling replaceOrganizationApplicationRoles.');
        }

        if (replaceOrganizationApplicationRolesRequest === null || replaceOrganizationApplicationRolesRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationApplicationRolesRequest was null or undefined when calling replaceOrganizationApplicationRoles.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications/${encodeURIComponent(String(applicationId))}/roles`,
                    replaceOrganizationApplicationRolesRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replace organization applications
     * Replace all applications associated with the organization with the given data.
     * @param id The unique identifier of the organization.
     * @param replaceOrganizationApplicationsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationApplications(id: string, replaceOrganizationApplicationsRequest: ReplaceOrganizationApplicationsRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationApplications(id: string, replaceOrganizationApplicationsRequest: ReplaceOrganizationApplicationsRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationApplications.');
        }

        if (replaceOrganizationApplicationsRequest === null || replaceOrganizationApplicationsRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationApplicationsRequest was null or undefined when calling replaceOrganizationApplications.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/applications`,
                    replaceOrganizationApplicationsRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replace organization JIT email domains
     * Replace all just-in-time provisioning email domains for the organization with the given data.
     * @param id The unique identifier of the organization.
     * @param replaceOrganizationJitEmailDomainsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationJitEmailDomains(id: string, replaceOrganizationJitEmailDomainsRequest: ReplaceOrganizationJitEmailDomainsRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationJitEmailDomains(id: string, replaceOrganizationJitEmailDomainsRequest: ReplaceOrganizationJitEmailDomainsRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationJitEmailDomains.');
        }

        if (replaceOrganizationJitEmailDomainsRequest === null || replaceOrganizationJitEmailDomainsRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationJitEmailDomainsRequest was null or undefined when calling replaceOrganizationJitEmailDomains.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/email-domains`,
                    replaceOrganizationJitEmailDomainsRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replace organization JIT default roles
     * Replace all organization roles that will be assigned to users during just-in-time provisioning with the given data.
     * @param id The unique identifier of the organization.
     * @param replaceOrganizationJitRolesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationJitRoles(id: string, replaceOrganizationJitRolesRequest: ReplaceOrganizationJitRolesRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationJitRoles(id: string, replaceOrganizationJitRolesRequest: ReplaceOrganizationJitRolesRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationJitRoles.');
        }

        if (replaceOrganizationJitRolesRequest === null || replaceOrganizationJitRolesRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationJitRolesRequest was null or undefined when calling replaceOrganizationJitRoles.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/roles`,
                    replaceOrganizationJitRolesRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replace organization JIT SSO connectors
     * Replace all enterprise SSO connectors for just-in-time provisioning of users in the organization with the given data.
     * @param id The unique identifier of the organization.
     * @param replaceOrganizationJitSsoConnectorsRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationJitSsoConnectors(id: string, replaceOrganizationJitSsoConnectorsRequest: ReplaceOrganizationJitSsoConnectorsRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationJitSsoConnectors(id: string, replaceOrganizationJitSsoConnectorsRequest: ReplaceOrganizationJitSsoConnectorsRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationJitSsoConnectors.');
        }

        if (replaceOrganizationJitSsoConnectorsRequest === null || replaceOrganizationJitSsoConnectorsRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationJitSsoConnectorsRequest was null or undefined when calling replaceOrganizationJitSsoConnectors.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/jit/sso-connectors`,
                    replaceOrganizationJitSsoConnectorsRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update roles for a user in an organization
     * Update roles assigned to a user in the specified organization with the provided data.
     * @param id The unique identifier of the organization.
     * @param userId The unique identifier of the user.
     * @param replaceOrganizationUserRolesRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationUserRoles(id: string, userId: string, replaceOrganizationUserRolesRequest: ReplaceOrganizationUserRolesRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationUserRoles(id: string, userId: string, replaceOrganizationUserRolesRequest: ReplaceOrganizationUserRolesRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationUserRoles.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling replaceOrganizationUserRoles.');
        }

        if (replaceOrganizationUserRolesRequest === null || replaceOrganizationUserRolesRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationUserRolesRequest was null or undefined when calling replaceOrganizationUserRoles.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users/${encodeURIComponent(String(userId))}/roles`,
                    replaceOrganizationUserRolesRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Replace organization user members
     * Replace all user members for the specified organization with the given users. This effectively removing all existing user memberships in the organization and adding the new users as members.
     * @param id The unique identifier of the organization.
     * @param replaceOrganizationUsersRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replaceOrganizationUsers(id: string, replaceOrganizationUsersRequest: ReplaceOrganizationUsersRequest, ): Observable<AxiosResponse<any>>;
    public replaceOrganizationUsers(id: string, replaceOrganizationUsersRequest: ReplaceOrganizationUsersRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling replaceOrganizationUsers.');
        }

        if (replaceOrganizationUsersRequest === null || replaceOrganizationUsersRequest === undefined) {
            throw new Error('Required parameter replaceOrganizationUsersRequest was null or undefined when calling replaceOrganizationUsers.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.put<any>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}/users`,
                    replaceOrganizationUsersRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
    /**
     * Update organization
     * Update organization details by ID with the given data.
     * @param id The unique identifier of the organization.
     * @param updateOrganizationRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrganization(id: string, updateOrganizationRequest: UpdateOrganizationRequest, ): Observable<AxiosResponse<ListApplicationUserConsentOrganizations200ResponseOrganizationsInner>>;
    public updateOrganization(id: string, updateOrganizationRequest: UpdateOrganizationRequest, ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateOrganization.');
        }

        if (updateOrganizationRequest === null || updateOrganizationRequest === undefined) {
            throw new Error('Required parameter updateOrganizationRequest was null or undefined when calling updateOrganization.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (ManagementApi) required
        if (typeof this.configuration.accessToken === 'function') {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken()));
        } else if (this.configuration.accessToken) {
            accessTokenObservable = from(Promise.resolve(this.configuration.accessToken));
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.patch<ListApplicationUserConsentOrganizations200ResponseOrganizationsInner>(`${this.basePath}/api/organizations/${encodeURIComponent(String(id))}`,
                    updateOrganizationRequest,
                    {
                        withCredentials: this.configuration.withCredentials,
                        headers: headers
                    }
                );
            })
        );
    }
}
