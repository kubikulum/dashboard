/**
 * Logto API references
 * API references for Logto services.  Note: The documentation is for Logto Cloud. If you are using Logto OSS, please refer to the response of `/api/swagger.json` endpoint on your Logto instance.
 *
 * The version of the OpenAPI document: Cloud
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { UpdateUserRequestAvatar } from './updateUserRequestAvatar';
import { GetJwtCustomizer200ResponseOneOfContextSampleUserProfile } from './getJwtCustomizer200ResponseOneOfContextSampleUserProfile';


/**
 * User data to create a new user. All properties are optional.
 */
export interface CreateUserRequest { 
    /**
     * Primary phone number for the user. It should be unique across all users.
     */
    primaryPhone?: string;
    /**
     * Primary email address for the user. It should be unique across all users.
     */
    primaryEmail?: string;
    /**
     * Username for the user. It should be unique across all users.
     */
    username?: string;
    /**
     * Plain text password for the user.
     */
    password?: string;
    /**
     * In case you already have the password digests and not the passwords, you can use them for the newly created user via this property. The value should be generated with one of the supported algorithms. The algorithm can be specified using the `passwordAlgorithm` property.
     */
    passwordDigest?: string;
    /**
     * The hash algorithm used for the password. It should be one of the supported algorithms: argon2, md5, sha1, sha256. Should the encryption algorithm differ from argon2, it will automatically be upgraded to argon2 upon the user\'s next sign-in.
     */
    passwordAlgorithm?: CreateUserRequest.PasswordAlgorithmEnum;
    name?: string;
    avatar?: UpdateUserRequestAvatar | null;
    /**
     * arbitrary
     */
    customData?: object;
    profile?: GetJwtCustomizer200ResponseOneOfContextSampleUserProfile;
}
export namespace CreateUserRequest {
    export type PasswordAlgorithmEnum = 'Argon2i' | 'SHA1' | 'SHA256' | 'MD5' | 'Bcrypt';
    export const PasswordAlgorithmEnum = {
        Argon2i: 'Argon2i' as PasswordAlgorithmEnum,
        Sha1: 'SHA1' as PasswordAlgorithmEnum,
        Sha256: 'SHA256' as PasswordAlgorithmEnum,
        Md5: 'MD5' as PasswordAlgorithmEnum,
        Bcrypt: 'Bcrypt' as PasswordAlgorithmEnum
    };
}


